name: "Code Analysis"

on:
  pull_request:

env:
  GO: 1.16

jobs:
  Nancy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO }}

      - name: Prepare go list
        run: go list -json -m all > go.list

      - name: Run Nancy
        uses: sonatype-nexus-community/nancy-github-action@v1.0.2

  GolangCI-Lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO }}

      - name: Run GolangCi-Lint
        uses: golangci/golangci-lint-action@v2.5.2
        with:
          version: latest
          skip-build-cache: true
          skip-go-installation: true

  CodeQL:
    # CodeQL runs on ubuntu-latest, windows-latest, and macos-latest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  UnitTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO }}

      - name: Unit Tests
        run: go test -race -cover -coverprofile=coverage.out -covermode=atomic -cpu 1,2 -bench . -benchmem ./... > test.log

      - name: Codecov
        uses: codecov/codecov-action@v1.5.0
        with:
          file: ./coverage.out

      - name: Upload log
        if: always()
        uses: actions/upload-artifact@v2.2.4
        with:
          name: log
          path: test.log

      - name: Build
        run: |
          VERSION="$(git describe --abbrev=0 || echo 'v0.0.0')+${{ github.sha }}"
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X 'main.version=${VERSION}'" -o grade grade.go
          ./grade --version

      - name: Upload grade
        uses: actions/upload-artifact@v2.2.4
        with:
          name: bin
          path: grade

  json:
    name: Grade Json
    needs: UnitTests
    runs-on: ubuntu-latest
    steps:
      - name: Download grade
        uses: actions/download-artifact@v2
        with:
          name: bin
      - name: Make executable
        run: chmod +x grade
      - name: Download log
        uses: actions/download-artifact@v2
        with:
          name: log
      - uses: actions/github-script@v4.0.2
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade JSON
        run: >-
          echo "Grade JSON" >> logs/json.log &&
          ./grade json
          --tag "hardwareID=github/actions"
          --tag "goVersion=$(go version | cut -d' ' -f3-)"
          --tag "revision=${{ github.sha }}"
          --tag "timestamp=${{ steps.commited-at.outputs.result }}"
          --tag "branch=${{ github.ref }}"
          < test.log
          2>&1
          | tee -a logs/json.log
          | grep --color Fib
      - name: Show logs
        if: failure()
        run: cat logs/*.log

  influx:
    name: Grade InfluxDB
    needs: UnitTests
    runs-on: ubuntu-latest
    services:
      influxdb:
        image: influxdb:1.8
        ports:
          - 8086:8086
        options: "--name=influxdb"
    env:
      DATABASE: Benchmarks
      COLLECTION: Grade
    steps:
      - name: Download grade
        uses: actions/download-artifact@v2
        with:
          name: bin
      - name: Make executable
        run: chmod +x grade
      - name: Download log
        uses: actions/download-artifact@v2
        with:
          name: log
      - uses: actions/github-script@v4.0.2
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade dry-run
        run: >-
          echo "Grade influx dry-run" >> logs/dry-run.log &&
          ./grade influx
          --tag "hardwareID=github/actions"
          --tag "goVersion=$(go version | cut -d' ' -f3-)"
          --tag "revision=${{ github.sha }}"
          --tag "timestamp=${{ steps.commited-at.outputs.result }}"
          --tag "branch=${{ github.ref }}"
          < test.log
          2>&1
          | tee -a logs/dry-run.log
          | grep --color Fib
      - name: Create Database
        run: docker exec influxdb influx -execute "CREATE DATABASE ${DATABASE} WITH DURATION INF SHARD DURATION 90d"
      - name: Grade
        run: >-
          echo "Grade influx" >> logs/influx.log &&
          ./grade influx
          --connection-url="http://localhost:8086"
          --database="${DATABASE}"
          --measurement="${COLLECTION}"
          --tag "hardwareID=github/actions"
          --tag "goVersion=$(go version | cut -d' ' -f3-)"
          --tag "revision=${{ github.sha }}"
          --tag "timestamp=${{ steps.commited-at.outputs.result }}"
          --tag "branch=${{ github.ref }}"
          < test.log
          2>&1
          | tee -a logs/influx.log
      - name: Check DB
        run: >-
          echo "Check DB" >> logs/db.log &&
          docker exec influxdb influx -database ${DATABASE} -execute "SELECT * FROM ${COLLECTION}"
          2>&1
          | tee -a logs/db.log
          | grep --color Fib
      - name: Docker logs
        if: failure()
        run: |
          echo "Docker ps" >> logs/ps.log
          docker ps 2>&1 > logs/ps.log
          echo "Docker logs" >> logs/container.log
          docker logs influxdb 2>&1 > logs/container.log
      - name: Show logs
        if: failure()
        run: cat logs/*.log

  mongo:
    name: Grade MongoDB
    needs: UnitTests
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: "--name=mongodb"
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: secret
    env:
      DATABASE: Benchmarks
      COLLECTION: Grade
    steps:
      - name: Download grade
        uses: actions/download-artifact@v2
        with:
          name: bin
      - name: Make executable
        run: chmod +x grade
      - name: Download log
        uses: actions/download-artifact@v2
        with:
          name: log
      - uses: actions/github-script@v4.0.2
        id: commited-at
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const commit_details = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha});
            return commit_details.data.author.date
      - name: Make logs dir
        run: mkdir logs
      - name: Grade dry-run
        run: >-
          echo "Grade mongo dry-run" >> logs/dry-run.log &&
          ./grade mongo
          --tag "hardwareID=github/actions"
          --tag "goVersion=$(go version | cut -d' ' -f3-)"
          --tag "revision=${{ github.sha }}"
          --tag "timestamp=${{ steps.commited-at.outputs.result }}"
          --tag "branch=${{ github.ref }}"
          < test.log
          2>&1
          | tee -a logs/dry-run.log
          | grep --color Fib
      - name: Grade
        run: >-
          echo "Grade mongo" >> logs/mongo.log &&
          ./grade mongo
          --connection-url="mongodb://admin:secret@localhost:27017"
          --database="${DATABASE}"
          --collection="${COLLECTION}"
          --tag "hardwareID=github/actions"
          --tag "goVersion=$(go version | cut -d' ' -f3-)"
          --tag "revision=${{ github.sha }}"
          --tag "timestamp=${{ steps.commited-at.outputs.result }}"
          --tag "branch=${{ github.ref }}"
          < test.log
          2>&1
          | tee -a logs/mongo.log
          | grep --color ObjectID
      - name: Check DB
        run: >-
          echo "Check DB" >> logs/db.log &&
          docker exec mongodb mongo -u admin -p secret --authenticationDatabase=admin ${DATABASE} --eval="db.${COLLECTION}.find()"
          2>&1
          | tee -a logs/db.log
          | grep --color Fib
      - name: Docker logs
        if: failure()
        run: |
          echo "Docker PS" >> logs/ps.log
          docker ps 2>&1 > logs/ps.log
          echo "Docker container" >> logs/container.log
          docker logs mongodb 2>&1 > logs/container.log
      - name: Show logs
        if: failure()
        run: cat logs/*.log
